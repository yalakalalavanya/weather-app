{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","city","setCity","useState","weatherData","setWeatherData","forecastData","setForecastData","error","setError","unit","setUnit","lat","setLat","lon","setLon","API_KEY","process","fetchWeather","async","arguments","length","undefined","query","weatherResponse","axios","get","data","forecastResponse","err","hourlyData","list","slice","map","item","time","dt_txt","temp","main","icon","weather","fiveDayData","filter","includes","date","split","humidity","pressure","fiveDayChartData","labels","datasets","label","borderColor","borderWidth","fill","humidityData","backgroundColor","pressureData","getWeatherIcon","_jsx","WiDaySunny","size","WiDayCloudy","WiRain","WiThunderstorm","WiSnow","WiCloudy","_jsxs","style","textAlign","padding","children","onSubmit","e","preventDefault","marginBottom","type","placeholder","value","onChange","target","fontSize","marginLeft","onClick","handleGeolocation","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","handleUnitToggle","color","marginTop","background","borderRadius","boxShadow","name","description","wind","speed","Line","options","responsive","Bar","listStyleType","index","margin","display","alignItems","justifyContent","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","React","StrictMode"],"mappings":"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","file":"static/js/main.be94a67c.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport { Bar, Line, Pie } from 'react-chartjs-2';\nimport Chart from 'chart.js/auto';\nimport { WiDaySunny, WiDayRain, WiDayCloudy, WiDayThunderstorm, WiDaySnow, WiCloudy, WiRain, WiThunderstorm, WiSnow, WiHumidity, WiBarometer, WiDayFog } from 'weather-icons-react';\nimport './App.css';\n\nconst App = () => {\n  const [city, setCity] = useState('');\n  const [weatherData, setWeatherData] = useState(null);\n  const [forecastData, setForecastData] = useState(null);\n  const [error, setError] = useState(null);\n  const [unit, setUnit] = useState('metric'); // 'metric' for Celsius, 'imperial' for Fahrenheit\n  const [lat, setLat] = useState(null);\n  const [lon, setLon] = useState(null);\n  const API_KEY = process.env.REACT_APP_API_KEY;\n\n  const fetchWeather = async (lat = null, lon = null) => {\n    const query = lat && lon\n      ? `lat=${lat}&lon=${lon}`\n      : `q=${city}`;\n  \n    try {\n      const weatherResponse = await axios.get(\n        `https://api.openweathermap.org/data/2.5/weather?${query}&appid=${API_KEY}&units=${unit}`\n      );\n      setWeatherData(weatherResponse.data);\n  \n      const forecastResponse = await axios.get(\n        `https://api.openweathermap.org/data/2.5/forecast?${query}&appid=${API_KEY}&units=${unit}`\n      );\n      setForecastData(forecastResponse.data);\n      \n      setError(null);\n    } catch (err) {\n      setError('Error fetching weather data. Please try again.');\n      setWeatherData(null);\n      setForecastData(null);\n    }\n  };\n  \n\n  const handleInputChange = (e) => {\n    setCity(e.target.value);\n  };\n\n  const handleSearch = (e) => {\n    e.preventDefault();\n    fetchWeather();\n  };\n\n  const handleGeolocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          setLat(latitude);\n          setLon(longitude);\n          fetchWeather(latitude, longitude);\n        },\n        (error) => {\n          setError('Error getting location. Please try again.');\n        }\n      );\n    } else {\n      setError('Geolocation is not supported by this browser.');\n    }\n  };\n\n  const handleUnitToggle = () => {\n    setUnit(unit === 'metric' ? 'imperial' : 'metric');\n    fetchWeather(lat, lon);\n  };\n\n  const getHourlyData = () => {\n    if (!forecastData) return [];\n    return forecastData.list.slice(0, 8).map(item => ({\n      time: item.dt_txt,\n      temp: item.main.temp,\n      icon: item.weather[0].icon\n    }));\n  };\n\n  const get5DayData = () => {\n    if (!forecastData) return [];\n    return forecastData.list.filter(item => item.dt_txt.includes('15:00:00')).map(item => ({\n      date: item.dt_txt.split(' ')[0],\n      temp: item.main.temp,\n      humidity: item.main.humidity,\n      pressure: item.main.pressure\n    }));\n  };\n\n  const hourlyData = getHourlyData();\n  const fiveDayData = get5DayData();\n\n  const hourlyChartData = {\n    labels: hourlyData.map(item => item.time),\n    datasets: [{\n      label: 'Temperature (Â°C)',\n      data: hourlyData.map(item => item.temp),\n      borderColor: 'rgba(75,192,192,1)',\n      borderWidth: 1,\n      fill: false\n    }]\n  };\n\n  const fiveDayChartData = {\n    labels: fiveDayData.map(item => item.date),\n    datasets: [{\n      label: 'Temperature (Â°C)',\n      data: fiveDayData.map(item => item.temp),\n      borderColor: 'rgba(153,102,255,1)',\n      borderWidth: 1,\n      fill: false\n    }]\n  };\n\n  const humidityData = {\n    labels: fiveDayData.map(item => item.date),\n    datasets: [{\n      label: 'Humidity (%)',\n      data: fiveDayData.map(item => item.humidity),\n      backgroundColor: 'rgba(75,192,192,0.2)',\n      borderColor: 'rgba(75,192,192,1)',\n      borderWidth: 1\n    }]\n  };\n\n  const pressureData = {\n    labels: fiveDayData.map(item => item.date),\n    datasets: [{\n      label: 'Pressure (hPa)',\n      data: fiveDayData.map(item => item.pressure),\n      backgroundColor: 'rgba(153,102,255,0.2)',\n      borderColor: 'rgba(153,102,255,1)',\n      borderWidth: 1\n    }]\n  };\n\n  const getWeatherIcon = (icon) => {\n    switch (icon) {\n      case '01d': return <WiDaySunny size={30} />;\n      case '02d': return <WiDayCloudy size={30} />;\n      case '09d': return <WiRain size={30} />;\n      case '11d': return <WiThunderstorm size={30} />;\n      case '13d': return <WiSnow size={30} />;\n      default: return <WiCloudy size={30} />;\n    }\n  };\n\n  return (\n    <div style={{ textAlign: 'center', padding: '50px', backgroundColor: '#f0f0f0' }}>\n      <h1>Weather App</h1>\n      <form onSubmit={handleSearch} style={{ marginBottom: '20px' }}>\n        <input\n          type=\"text\"\n          placeholder=\"Enter city\"\n          value={city}\n          onChange={handleInputChange}\n          style={{ padding: '10px', fontSize: '16px' }}\n        />\n        <button type=\"submit\" style={{ marginLeft: '10px', padding: '10px 20px' }}>\n          Search\n        </button>\n        <button\n          type=\"button\"\n          onClick={handleGeolocation}\n          style={{ marginLeft: '10px', padding: '10px 20px' }}\n        >\n          Use My Location\n        </button>\n        <button\n          type=\"button\"\n          onClick={handleUnitToggle}\n          style={{ marginLeft: '10px', padding: '10px 20px' }}\n        >\n          {unit === 'metric' ? 'Switch to Â°F' : 'Switch to Â°C'}\n        </button>\n      </form>\n\n      {error && <p style={{ color: 'red' }}>{error}</p>}\n\n      {weatherData && (\n        <div style={{ marginTop: '20px', background: '#fff', padding: '20px', borderRadius: '8px', boxShadow: '0 0 10px rgba(0,0,0,0.1)' }}>\n          <h2>{weatherData.name}</h2>\n          <p>Temperature: {weatherData.main.temp}Â°{unit === 'metric' ? 'C' : 'F'}</p>\n          <p>Weather: {weatherData.weather[0].description}</p>\n          {getWeatherIcon(weatherData.weather[0].icon)}\n          <p>Humidity: {weatherData.main.humidity}%</p>\n          <p>Wind Speed: {weatherData.wind.speed} m/s</p>\n        </div>\n      )}\n\n      {forecastData && (\n        <div style={{ marginTop: '20px' }}>\n          <h2>5-Day Forecast</h2>\n          <div style={{ marginBottom: '20px' }}>\n            <Line data={fiveDayChartData} options={{ responsive: true }} />\n          </div>\n          <div style={{ marginBottom: '20px' }}>\n            <Bar data={humidityData} options={{ responsive: true }} />\n          </div>\n          <div>\n            <Bar data={pressureData} options={{ responsive: true }} />\n          </div>\n        </div>\n      )}\n\n      {hourlyData.length > 0 && (\n        <div>\n          <h2>Hourly Forecast</h2>\n          <ul style={{ listStyleType: 'none', padding: 0 }}>\n            {hourlyData.map((data, index) => (\n              <li key={index} style={{ margin: '10px 0', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n                {getWeatherIcon(data.icon)} {data.time}: {data.temp}Â°{unit === 'metric' ? 'C' : 'F'}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();"],"sourceRoot":""}